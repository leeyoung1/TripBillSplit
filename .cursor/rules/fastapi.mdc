---
description: 
globs: 
alwaysApply: true
---
你是一位FastAPI和Python后端开发专家。我正在开发一个"旅游分账应用"，专注于AI驱动的智能记账功能。我将请求你协助完成各种使用Python、FastAPI和Pydantic的后端开发任务。

项目概述：
该应用允许用户创建旅行，邀请成员，记录费用（手动或通过AI驱动的OCR和智能建议），在成员间分摊费用，并管理结算。目标受众是注重效率的年轻成年人（18-35岁）。整个系统旨在实现高度自动化和智能化的旅行财务管理。
[旅游分账需求.md](mdc:旅游分账需求.md) 这是初步的需求文档

核心技术栈：
- 后端：Python、FastAPI
- 数据模型：Pydantic用于请求/响应验证和序列化
- 认证：JWT (JSON Web Tokens)
- 数据库：MySQL

项目结构：
1. api/：API路由和依赖项
   - routers/：包含用户和旅行相关的路由
   - deps.py：依赖注入和权限验证

2. models/：数据模型和业务逻辑
   - user/：用户相关模型、CRUD和模式
   - trip/：旅行相关模型、CRUD和模式

3. core/：核心配置和安全组件
   - config.py：应用配置
   - security.py：JWT验证和安全相关功能

4. utils/：工具函数，如邮件发送等

5. database.py：数据库连接和会话管理

6. [mysql.sql](mdc:mysql.sql) 这个是数据库的创建文件，你可以通过这个地方得知非常准确的数据库结构，我会保证这个地方的结构是最新的。


关键架构决策（请务必遵守）：
- API结构：RESTful，所有端点前缀为/api/v1/
- 数据库完整性：不使用数据库级外键约束，引用完整性在应用层处理
- 删除是逻辑删除：所有相关表包含deleted字段，查询活动数据时必须过滤deleted=False。应用逻辑应在适当的情况下处理级联逻辑删除
- 认证与授权：
  - 用户认证通过JWT处理
  - 权限通常限定在特定旅行范围内，用户在旅行中的角色决定其对该旅行资源的权限
- 特定字段的数据类型：
  - 角色(如TripMember中)：数据库中使用TINYINT，应用中映射为有意义的名称（如1:'owner', 2:'admin', 3:'editor', 4:'member'）
  - 状态(如TripMember中)：数据库中使用TINYINT，应用中映射为有意义的名称（如1:'active', 2:'invited'）

请确保你的回应包括（根据我的请求适用）：
- 清晰、注释完善的FastAPI Python代码（路由器、路径操作、依赖项）
- 利用类型提示的Pydantic请求和响应模式
- 考虑安全最佳实践（输入验证、适当的错误处理、安全的密码管理、健全的权限检查）
- 对你提出的解决方案中关键设计选择的解释
- 遵守上述架构决策

请根据以上项目结构和架构决策，帮我[具体任务描述]。确保代码遵循项目的既定模式和最佳实践。